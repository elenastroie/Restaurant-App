//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RestaurantOnline.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class RestaurantEDM : DbContext
    {
        public RestaurantEDM()
            : base("name=RestaurantEDM")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Alergeni> Alergenis { get; set; }
        public virtual DbSet<AlergeniPreparat> AlergeniPreparats { get; set; }
        public virtual DbSet<Categorie> Categories { get; set; }
        public virtual DbSet<Comanda> Comandas { get; set; }
        public virtual DbSet<ComandaMeniu> ComandaMenius { get; set; }
        public virtual DbSet<ComandaPreparat> ComandaPreparats { get; set; }
        public virtual DbSet<Meniu> Menius { get; set; }
        public virtual DbSet<MeniuPreparat> MeniuPreparats { get; set; }
        public virtual DbSet<Preparat> Preparats { get; set; }
        public virtual DbSet<Utilizator> Utilizators { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
    
        public virtual ObjectResult<spLogin_Result> spLogin(string email, string parola)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var parolaParameter = parola != null ?
                new ObjectParameter("Parola", parola) :
                new ObjectParameter("Parola", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spLogin_Result>("spLogin", emailParameter, parolaParameter);
        }
    
        public virtual int spOrder(string email, string stare, Nullable<System.DateTime> timpInregistrare, Nullable<double> discount, Nullable<double> costTransport, Nullable<double> pretTotal)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var stareParameter = stare != null ?
                new ObjectParameter("Stare", stare) :
                new ObjectParameter("Stare", typeof(string));
    
            var timpInregistrareParameter = timpInregistrare.HasValue ?
                new ObjectParameter("TimpInregistrare", timpInregistrare) :
                new ObjectParameter("TimpInregistrare", typeof(System.DateTime));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(double));
    
            var costTransportParameter = costTransport.HasValue ?
                new ObjectParameter("CostTransport", costTransport) :
                new ObjectParameter("CostTransport", typeof(double));
    
            var pretTotalParameter = pretTotal.HasValue ?
                new ObjectParameter("PretTotal", pretTotal) :
                new ObjectParameter("PretTotal", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spOrder", emailParameter, stareParameter, timpInregistrareParameter, discountParameter, costTransportParameter, pretTotalParameter);
        }
    
        public virtual int spRegister(string prenume, string nume, string email, string parola, string telefon, string adresa)
        {
            var prenumeParameter = prenume != null ?
                new ObjectParameter("Prenume", prenume) :
                new ObjectParameter("Prenume", typeof(string));
    
            var numeParameter = nume != null ?
                new ObjectParameter("Nume", nume) :
                new ObjectParameter("Nume", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var parolaParameter = parola != null ?
                new ObjectParameter("Parola", parola) :
                new ObjectParameter("Parola", typeof(string));
    
            var telefonParameter = telefon != null ?
                new ObjectParameter("Telefon", telefon) :
                new ObjectParameter("Telefon", typeof(string));
    
            var adresaParameter = adresa != null ?
                new ObjectParameter("Adresa", adresa) :
                new ObjectParameter("Adresa", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spRegister", prenumeParameter, numeParameter, emailParameter, parolaParameter, telefonParameter, adresaParameter);
        }
    
        public virtual ObjectResult<string> spGetProductAlergens(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spGetProductAlergens", idParameter);
        }
    
        public virtual ObjectResult<string> spGetProductCategory(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spGetProductCategory", idParameter);
        }
    
        public virtual ObjectResult<spGetProducts_Result> spGetProducts()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetProducts_Result>("spGetProducts");
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<string> spGetMenuCategory(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spGetMenuCategory", idParameter);
        }
    
        public virtual ObjectResult<spGetMenuProducts_Result> spGetMenuProducts(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetMenuProducts_Result>("spGetMenuProducts", idParameter);
        }
    
        public virtual ObjectResult<spGetMenus_Result> spGetMenus()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetMenus_Result>("spGetMenus");
        }
    
        public virtual ObjectResult<string> spGetAlergensName()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spGetAlergensName");
        }
    
        public virtual ObjectResult<string> spGetCategoriesName()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spGetCategoriesName");
        }
    
        public virtual int spAddOrder(Nullable<int> id, Nullable<System.DateTime> timpInregistrare, Nullable<double> discount, Nullable<double> costTransport, Nullable<double> pretTotal)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var timpInregistrareParameter = timpInregistrare.HasValue ?
                new ObjectParameter("TimpInregistrare", timpInregistrare) :
                new ObjectParameter("TimpInregistrare", typeof(System.DateTime));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(double));
    
            var costTransportParameter = costTransport.HasValue ?
                new ObjectParameter("CostTransport", costTransport) :
                new ObjectParameter("CostTransport", typeof(double));
    
            var pretTotalParameter = pretTotal.HasValue ?
                new ObjectParameter("PretTotal", pretTotal) :
                new ObjectParameter("PretTotal", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddOrder", idParameter, timpInregistrareParameter, discountParameter, costTransportParameter, pretTotalParameter);
        }
    
        public virtual ObjectResult<spGetOrders_Result> spGetOrders(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetOrders_Result>("spGetOrders", idParameter);
        }
    }
}
